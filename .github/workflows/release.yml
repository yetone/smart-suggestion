name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-w -s" -o dist/smart-suggestion-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} ./cmd/main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smart-suggestion-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/smart-suggestion-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # In v4, artifacts are downloaded into subdirectories named after the artifact
        # Each artifact directory contains the binary file
        echo "Contents of dist directory:"
        find dist -type f -ls
        
        # Copy binaries from artifact subdirectories to release-assets
        find dist -name "smart-suggestion-*" -type f -exec cp {} release-assets/ \;
        
        # List what we copied
        echo "Contents of release-assets after copying:"
        ls -la release-assets/
        
        # Create archive for each platform with plugin files
        for binary_path in release-assets/smart-suggestion-*; do
          # Skip if it's a directory or doesn't exist
          if [[ ! -f "$binary_path" ]]; then
            echo "Skipping $binary_path (not a file)"
            continue
          fi
          
          binary_name=$(basename "$binary_path")
          platform_arch=$(echo "$binary_name" | sed 's/smart-suggestion-//')
          
          echo "Processing binary: $binary_name for platform: $platform_arch"
          
          # Use a temporary directory name to avoid conflicts with binary files
          temp_dir="release-assets/temp-$platform_arch"
          
          # Create platform-specific directory (remove if exists first)
          rm -rf "$temp_dir"
          mkdir -p "$temp_dir"
          
          # Copy binary and make it executable
          cp "$binary_path" "$temp_dir/smart-suggestion"
          chmod +x "$temp_dir/smart-suggestion"
          
          # Copy plugin files
          cp smart-suggestion.plugin.zsh "$temp_dir/"
          cp README.md "$temp_dir/"
          
          # Create tar.gz archive with proper directory name
          cd release-assets
          rm -rf "smart-suggestion-$platform_arch"
          # Rename temp directory to final name for archive
          mv "temp-$platform_arch" "smart-suggestion-$platform_arch"
          tar -czf "smart-suggestion-$platform_arch.tar.gz" "smart-suggestion-$platform_arch"
          cd ..
          
          echo "Created archive: smart-suggestion-$platform_arch.tar.gz"
          
          # Clean up directory
          rm -rf "release-assets/smart-suggestion-$platform_arch"
        done
        
        # Remove individual binaries, keep only archives
        find release-assets -name "smart-suggestion-*" -type f ! -name "*.tar.gz" -delete
        
        # Show final contents
        echo "Final release assets:"
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        name: Release ${{ github.event.inputs.tag || github.ref_name }}
        draft: false
        prerelease: false
        files: |
          release-assets/*.tar.gz
          install.sh
        body: |
          ## Smart Suggestion Release ${{ github.event.inputs.tag || github.ref_name }}
          
          ### Installation
          
          **Quick Install (Recommended):**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/yetone/smart-suggestion/${{ github.event.inputs.tag || github.ref_name }}/install.sh | bash
          ```
          
          **Manual Install:**
          1. Download the appropriate archive for your platform
          2. Extract it to your desired location
          3. Follow the setup instructions in the README.md
          
          ### Supported Platforms
          - Linux (x86_64, ARM64)
          - macOS (Intel, Apple Silicon)
          - Windows (x86_64)
          
          ### Changes
          See the commit history for detailed changes in this release.
          
          ### Requirements
          - zsh shell
          - zsh-autosuggestions plugin
          - API key for OpenAI, Anthropic, or Google Gemini
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
